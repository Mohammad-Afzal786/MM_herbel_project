import 'package:flutter/material.dart';
import 'dart:math';
import 'package:get/get.dart';
import 'package:mmherbel/theme/app_colors.dart';
import 'package:get_storage/get_storage.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';

/// =============================================================
/// üöÄ SplashPage
/// =============================================================
/// ‡§Ø‡§π app ‡§ï‡§æ ‡§™‡§π‡§≤‡§æ page ‡§π‡•à (launch ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§¶‡§ø‡§ñ‡•á‡§ó‡§æ)
/// ‡§á‡§∏‡§Æ‡•á‡§Ç:
///   ‚úÖ Logo animation ‡§π‡•ã‡§ó‡§æ (‡§ä‡§™‡§∞ ‡§∏‡•á slide ‡§π‡•ã‡§ï‡§∞ ‡§Ü‡§è‡§ó‡§æ)
///   ‚úÖ ‡§è‡§ï circle animation ‡§π‡•ã‡§ó‡§æ (progress ‡§ï‡•Ä ‡§§‡§∞‡§π ‡§ò‡•Ç‡§Æ‡•á‡§ó‡§æ)
///   ‚úÖ ‡§®‡•Ä‡§ö‡•á "From Kashif Khan" ‡§≤‡§ø‡§ñ‡§æ ‡§π‡•Å‡§Ü ‡§Ü‡§è‡§ó‡§æ
///   ‚úÖ 4 sec ‡§¨‡§æ‡§¶ navigation ‡§π‡•ã‡§ó‡§æ:
///       - ‡§Ö‡§ó‡§∞ user ‡§®‡•á intro ‡§¶‡•á‡§ñ‡§æ ‡§π‡•à ‚Üí `/login`
///       - ‡§Ö‡§ó‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§¶‡•á‡§ñ‡§æ ‡§π‡•à ‚Üí `/intro`
///
/// Responsive design ‡§ï‡•á ‡§≤‡§ø‡§è `flutter_screenutil` ‡§ï‡§æ use ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à
/// (‡§π‡§∞ ‡§ú‡§ó‡§π `.w`, `.h`, `.sp` ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§π‡•Å‡§Ü ‡§π‡•à)
/// =============================================================
class SplashPage extends StatefulWidget {
  const SplashPage({super.key});

  @override
  SplashPageState createState() => SplashPageState();
}

class SplashPageState extends State<SplashPage>
    with TickerProviderStateMixin {
  /// Local storage instance (GetStorage)
  /// - ‡§á‡§∏‡§Æ‡•á‡§Ç ‡§π‡§Æ check ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á ‡§ï‡§ø "intro ‡§™‡§π‡§≤‡•á ‡§¶‡•á‡§ñ‡§æ ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç"
  final box = GetStorage();

  /// Animation controllers
  late AnimationController _logoController;   // Logo + bottom text ‡§ï‡•á ‡§≤‡§ø‡§è
  late AnimationController _circleController; // Circle animation ‡§ï‡•á ‡§≤‡§ø‡§è

  /// Animations
  late Animation<Offset> _logoAnimation;      // Logo ‚Üí slide top ‡§∏‡•á center
  late Animation<Offset> _textAnimation;      // Text ‚Üí slide bottom ‡§∏‡•á ‡§ä‡§™‡§∞

  @override
  void initState() {
    super.initState();

    /// ‚úÖ Navigation logic (4 sec delay)
    /// splash screen ‡§ï‡•á ‡§¨‡§æ‡§¶:
    ///   - ‡§Ö‡§ó‡§∞ "seenIntro" true ‡§π‡•à ‚Üí LoginPage
    ///   - ‡§µ‡§∞‡§®‡§æ ‚Üí IntroPage
    Future.delayed(const Duration(seconds: 4), () {
      bool seenIntro = box.read('seenIntro') ?? false;
      if (seenIntro) {
        Get.offAllNamed('/login'); // direct login
      } else {
        Get.offAllNamed('/intro'); // first time intro
      }
    });

    /// ‚úÖ Logo animation controller (1 second)
    _logoController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 1000),
    );

    /// ‚úÖ Circle animation controller (2 seconds)
    _circleController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 2000),
    );

    /// ‚úÖ Logo slide animation
    _logoAnimation = Tween<Offset>(
      begin: const Offset(0, -1), // ‡§ä‡§™‡§∞ ‡§∏‡•á
      end: const Offset(0, 0),   // center ‡§§‡§ï
    ).animate(CurvedAnimation(
      parent: _logoController,
      curve: Curves.easeOut,
    ));

    /// ‚úÖ Bottom text slide animation
    _textAnimation = Tween<Offset>(
      begin: const Offset(0, 1), // ‡§®‡•Ä‡§ö‡•á ‡§∏‡•á
      end: const Offset(0, 0),   // ‡§Ö‡§™‡§®‡•Ä ‡§ú‡§ó‡§π
    ).animate(CurvedAnimation(
      parent: _logoController,
      curve: Curves.easeOut,
    ));

    /// Flow:
    /// 1. ‡§™‡§π‡§≤‡•á logo animate ‡§π‡•ã‡§ó‡§æ
    /// 2. ‡§´‡§ø‡§∞ circle animate ‡§π‡•ã‡§ó‡§æ
    _logoController.forward().whenComplete(() {
      _circleController.forward();
    });
  }

  @override
  void dispose() {
    /// Controllers dispose ‡§ï‡§∞‡§®‡§æ ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à
    _logoController.dispose();
    _circleController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppsColors.white,
      body: SafeArea(
        child: Stack(
          children: [
            /// üåÄ BACKGROUND CIRCLE ANIMATION
            Center(
              child: AnimatedBuilder(
                animation: _circleController,
                builder: (context, child) {
                  return CustomPaint(
                    painter: CircleSweepPainter(_circleController.value),
                    child: SizedBox(
                      width: 220.w, // responsive size
                      height: 220.w,
                    ),
                  );
                },
              ),
            ),

            /// ‚úÖ LOGO (center ‡§Æ‡•á‡§Ç)
            Align(
              alignment: Alignment.center,
              child: SlideTransition(
                position: _logoAnimation,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Image.asset(
                      'assets/images/logo.png',
                      width: 150.w,
                      height: 150.w,
                      fit: BoxFit.contain,
                    ),
                  ],
                ),
              ),
            ),

            /// ‚úÖ BOTTOM TEXT ("From Kashif Khan")
            Positioned(
              bottom: 30.h,
              left: 0,
              right: 0,
              child: SlideTransition(
                position: _textAnimation,
                child: Column(
                  children: [
                    Text(
                      "From",
                      style: TextStyle(
                        color: AppsColors.primary,
                        fontSize: 14.sp,
                        fontStyle: FontStyle.italic,
                      ),
                    ),
                    Text(
                      "Kashif Khan",
                      style: TextStyle(
                        color: AppsColors.primary,
                        fontSize: 16.sp,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

/// =============================================================
/// üé® CircleSweepPainter
/// =============================================================
/// ‡§Ø‡§π custom painter circle ‡§ï‡•ã draw ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
/// - progress (0 ‚Üí 1) ‡§ï‡•á ‡§π‡§ø‡§∏‡§æ‡§¨ ‡§∏‡•á circle arc ‡§¨‡§¢‡§º‡§§‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à
/// - strokeCap.round ‡§∏‡•á edges ‡§ó‡•ã‡§≤ ‡§∞‡§π‡§§‡•á ‡§π‡•à‡§Ç
/// =============================================================
class CircleSweepPainter extends CustomPainter {
  final double progress;
  CircleSweepPainter(this.progress);

  @override
  void paint(Canvas canvas, Size size) {
    final strokeWidth = 2.0.w; // responsive stroke
    final radius = min(size.width, size.height) / 2 - strokeWidth;

    final paint = Paint()
      ..color = AppsColors.primary
      ..style = PaintingStyle.stroke
      ..strokeWidth = strokeWidth
      ..strokeCap = StrokeCap.round;

    final center = Offset(size.width / 2, size.height / 2);

    /// Circle ‡§ï‡§æ start angle ‚Üí ‡§ä‡§™‡§∞ ‡§∏‡•á (-pi/2)
    /// Sweep angle ‚Üí progress * 360¬∞
    final startAngle = -pi / 2;
    final sweepAngle = 2 * pi * progress;

    canvas.drawArc(
      Rect.fromCircle(center: center, radius: radius),
      startAngle,
      sweepAngle,
      false,
      paint,
    );
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => true;
}
